	@classmethod
	def de_json(cls, json_string):
		if (json_string is None): return None
		obj = cls.check_json(json_string)
		message_id = obj['message_id']
		from_user = types.User.de_json(obj.get('from'))
		date = obj['date']
		chat = types.Chat.de_json(obj['chat'])
		content_type = None
		opts = {}
		if 'forward_from' in obj:
		    opts['forward_from'] = types.User.de_json(obj['forward_from'])
		if 'forward_from_chat' in obj:
		    opts['forward_from_chat'] = types.Chat.de_json(obj['forward_from_chat'])
		if 'forward_from_message_id' in obj:
		    opts['forward_from_message_id'] = obj.get('forward_from_message_id')
		if 'forward_signature' in obj:
		    opts['forward_signature'] = obj.get('forward_signature')
		if 'forward_date' in obj:
		    opts['forward_date'] = obj.get('forward_date')
		if 'reply_to_message' in obj:
		    opts['reply_to_message'] = ExtendedMessage.de_json(obj['reply_to_message'])
		if 'edit_date' in obj:
		    opts['edit_date'] = obj.get('edit_date')
		if 'media_group_id' in obj:
		    opts['media_group_id'] = obj.get('media_group_id')
		if 'author_signature' in obj:
		    opts['author_signature'] = obj.get('author_signature')
		if 'text' in obj:
		    opts['text'] = obj['text']
		    content_type = 'text'
		if 'entities' in obj:
		    opts['entities'] = ExtendedMessage.parse_entities(obj['entities'])
		if 'caption_entities' in obj:
		    opts['caption_entities'] = ExtendedMessage.parse_entities(obj['caption_entities'])
		if 'audio' in obj:
		    opts['audio'] = types.Audio.de_json(obj['audio'])
		    content_type = 'audio'
		if 'animation' in obj:
		    opts['animation'] = types.Animation.de_json(obj['animation'])
		    content_type = 'animation'
		if 'document' in obj:
		    opts['document'] = types.Document.de_json(obj['document'])
		    content_type = 'document'
		if 'game' in obj:
		    opts['game'] = types.Game.de_json(obj['game'])
		    content_type = 'game'
		if 'photo' in obj:
		    opts['photo'] = Extendedtypes.Message.parse_photo(obj['photo'])
		    content_type = 'photo'
		if 'sticker' in obj:
		    opts['sticker'] = types.Sticker.de_json(obj['sticker'])
		    content_type = 'sticker'
		if 'video' in obj:
		    opts['video'] = types.Video.de_json(obj['video'])
		    content_type = 'video'
		if 'video_note' in obj:
		    opts['video_note'] = types.VideoNote.de_json(obj['video_note'])
		    content_type = 'video_note'
		if 'voice' in obj:
		    opts['voice'] = types.Audio.de_json(obj['voice'])
		    content_type = 'voice'
		if 'caption' in obj:
		    opts['caption'] = obj['caption']
		if 'contact' in obj:
		    opts['contact'] = types.Contact.de_json(json.dumps(obj['contact']))
		    content_type = 'contact'
		if 'location' in obj:
		    opts['location'] = types.Location.de_json(obj['location'])
		    content_type = 'location'
		if 'venue' in obj:
		    opts['venue'] = types.Venue.de_json(obj['venue'])
		    content_type = 'venue'
		if 'dice' in obj:
		    opts['dice'] = types.Dice.de_json(obj['dice'])
		    content_type = 'dice'
		if 'new_chat_members' in obj:
		    new_chat_members = []
		    for member in obj['new_chat_members']:
		        new_chat_members.append(types.User.de_json(member))
		    opts['new_chat_members'] = new_chat_members
		    content_type = 'new_chat_members'
		if 'left_chat_member' in obj:
		    opts['left_chat_member'] = types.User.de_json(obj['left_chat_member'])
		    content_type = 'left_chat_member'
		if 'new_chat_title' in obj:
		    opts['new_chat_title'] = obj['new_chat_title']
		    content_type = 'new_chat_title'
		if 'new_chat_photo' in obj:
		    opts['new_chat_photo'] = ExtendedMessage.parse_photo(obj['new_chat_photo'])
		    content_type = 'new_chat_photo'
		if 'delete_chat_photo' in obj:
		    opts['delete_chat_photo'] = obj['delete_chat_photo']
		    content_type = 'delete_chat_photo'
		if 'group_chat_created' in obj:
		    opts['group_chat_created'] = obj['group_chat_created']
		    content_type = 'group_chat_created'
		if 'supergroup_chat_created' in obj:
		    opts['supergroup_chat_created'] = obj['supergroup_chat_created']
		    content_type = 'supergroup_chat_created'
		if 'channel_chat_created' in obj:
		    opts['channel_chat_created'] = obj['channel_chat_created']
		    content_type = 'channel_chat_created'
		if 'migrate_to_chat_id' in obj:
		    opts['migrate_to_chat_id'] = obj['migrate_to_chat_id']
		    content_type = 'migrate_to_chat_id'
		if 'migrate_from_chat_id' in obj:
		    opts['migrate_from_chat_id'] = obj['migrate_from_chat_id']
		    content_type = 'migrate_from_chat_id'
		if 'pinned_message' in obj:
		    opts['pinned_message'] = ExtendedMessage.de_json(obj['pinned_message'])
		    content_type = 'pinned_message'
		if 'invoice' in obj:
		    opts['invoice'] = types.Invoice.de_json(obj['invoice'])
		    content_type = 'invoice'
		if 'successful_payment' in obj:
		    opts['successful_payment'] = types.SuccessfulPayment.de_json(obj['successful_payment'])
		    content_type = 'successful_payment'
		if 'connected_website' in obj:
		    opts['connected_website'] = obj['connected_website']
		    content_type = 'connected_website'
		if 'poll' in obj:
		    opts['poll'] = types.Poll.de_json(obj['poll'])
		    content_type = 'poll'
		if 'passport_data' in obj:
		    opts['passport_data'] = obj['passport_data']
		    content_type = 'passport_data'
		return cls(message_id, from_user, date, chat, content_type, opts, json_string)